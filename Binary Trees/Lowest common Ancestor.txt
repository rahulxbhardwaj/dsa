import java.util.ArrayList;


public class practise{
    public static class Node{
        int data;
        Node left;
        Node right;

        public Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    public static boolean getPath(Node root , int n , ArrayList<Node> path){
    if(root == null){
        return false;
    }
    path.add(root);

    if(root.data == n){
        return true;
    }
    boolean foundleft = getPath(root.left , n , path);
    boolean foundright = getPath(root.right , n , path);

    if(foundleft || foundright){
        return true;
    }
    path.remove(path.size()-1);
    return false;
    }
public static Node lca(Node root , int n1  , int n2){
    ArrayList<Node> path1 = new ArrayList<>();
    ArrayList<Node> path2 = new ArrayList<>();

    getPath(root , n1 , path1);
    getPath(root , n2 , path2);

    //Last common
    int i = 0 ;
    for( ; i < path2.size() && i < path1.size() ; i++){
        if(path1.get(i) != path2.get(i)){
            break;
        }
    }
    //Last Equal Node -> i-1th
   return path1.get(i-1) ;
}


    public static void main(String[] args) {
       Node root = new Node(1);
       root.left = new Node(2);
       root.right = new Node(3);
       root.left.left = new Node(4);
       root.left.right = new Node(5);
       root.right.left = new Node(6);
       root.right.right = new Node(7);
       Node ans = lca(root , 3,2);
        System.out.println(ans.data);
    }
}