 
public class practise{

    static class Node{
        int data;
        Node left;
        Node right;

        Node(int num){
            this.data = num;
            this.left = null;
            this.right = null;
        }
    }
    public static class BinaryTree{
        static int idx = -1;
        public static Node BuildTree(int nodes[]){
            idx++;
            if(nodes[idx] == -1){
                return null;
            }
            Node newNode = new Node(nodes[idx]);
            newNode.left = BuildTree(nodes);
            newNode.right = BuildTree(nodes);

            return newNode;
        }

        public static int height(Node root){
            if(root == null){
                return 0;
            }
            int lh = height(root.left);
            int rh = height(root.right);
            int height = Math.max(lh,rh)+1;
            return height;
        }
        public static int diam(Node root){
            //Time - 0 (N^2)
            if(root == null){
                return 0;
            }
            int ldiam = diam(root.left);
            int lh = height(root.left);
            int rdiam = diam(root.right);
            int rh = height(root.right);
            int selfdia = lh+rh+1;
            return Math.max(selfdia,Math.max(ldiam,rdiam));
        }


    }

    public static void main(String[] args) {
        int nodes[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree tree = new BinaryTree();
        Node root = tree.BuildTree(nodes);
        System.out.println(BinaryTree.diam(root));

    }

}