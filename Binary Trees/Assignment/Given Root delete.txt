
import java.util.Queue;
import java.util.LinkedList;

public class practise{
    public static class Node{
        int data;
        Node left;
        Node right;
        public Node(int data){
            this.data = data;
            left = null;
            right = null;
        }
    }
    public static void levelOrder(Node root){
        if(root == null){
            return;
        }
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);

        while(!q.isEmpty()){
            Node cuurNode = q.remove();
            if(cuurNode == null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }else {
                    q.add(null);
                }
            }else {
                System.out.print(cuurNode.data +" ");
                if(cuurNode.left != null){
                    q.add(cuurNode.left);
                }
                if(cuurNode.right != null){
                    q.add(cuurNode.right);
                }
            }
        }
    }

public static void delete(Node root , int n){
        if(root == null){
            return;
        }
        delete(root.left,n);
        delete(root.right,n);

        if(root.left != null && root.left.data == n){
            root.left = null;
        }
        if(root.right != null && root.right.data == n){
            root.right = null;
        }
}

    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
//        root.left.left.left = new Node(10);
        root.left.right = new Node(8);
        root.right.left = new Node(8);
        root.right.right = new Node(7);
//        levelOrder(root);
        delete(root,8);
        levelOrder(root);


    }
}