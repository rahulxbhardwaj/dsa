import java.util.ArrayList;

public class practise {
    public static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }

public static void inorder(Node root , ArrayList<Integer> data){
        if(root == null){
            return;
        }
        inorder(root.left,data);
        data.add(root.data);
        inorder(root.right,data);
}

    public static void print(Node root) {
        if (root == null) {
            return;
        }
        print(root.left);
        System.out.print(root.data+" ");
        print(root.right);
    }

public static void mergelist(ArrayList<Integer> a1 , ArrayList<Integer> a2 , ArrayList<Integer> fianl){
        int i = 0;
        int j = 0;
        while(i < a1.size() && j < a2.size()){
            if(a1.get(i) <= a2.get(j)){
                fianl.add(a1.get(i));
                i++;
            }else {
                fianl.add(a2.get(j));
                j++;
            }
        }
        while (i  < a1.size()){i++;
            fianl.add(a1.get(i));

        }while (j  < a2.size()){
            fianl.add(a2.get(j));
            j++;
        }
}

public static Node CreateBst(ArrayList<Integer> data , int st , int ei){
     if(st > ei){
         return null;
     }
     int mid = (st+ei)/2;
     Node root = new Node(data.get(mid));
     root.left = CreateBst(data,st,mid-1);
     root.right = CreateBst(data,mid+1,ei);
     return root;
}
    public static void main(String[] args) {
        Node root1 = new Node(2);
        root1.left = new Node(1);
        root1.right = new Node(4);

        Node root2 = new Node(9);
        root2.left = new Node(3);
        root2.right = new Node(12);

        ArrayList<Integer> a1 = new ArrayList<>();
        ArrayList<Integer> a2 = new ArrayList<>();
        ArrayList<Integer> ans = new ArrayList<>();

        inorder(root1,a1);
        inorder(root2,a2);

        mergelist(a1,a2,ans);

       Node root = CreateBst(ans,0,ans.size()-1);
        print(root);

    }
}