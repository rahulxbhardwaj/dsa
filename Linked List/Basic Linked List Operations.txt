

public class Main{

    public static class Node{
        int data;
        Node next;

        Node(int data){
            this.data = data;
            next = null;
        }
    }
    public static boolean Cycledetect(Node head){
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow.data == fast.data){
                System.out.println("This is a Cycle LinkedList");
                return true;
            }
        }
        System.out.println("This is not a Cycle Linkedlist");
        return false;
    }

    public static void RemoveCycle(Node head){
        //DETECT CYCLE
        Node slow = head;
        Node fast = head;
        boolean flag = false;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow){
                flag = true;
                break;
            }
        }
        if(flag == false){
            return;
        }
        //Find the meeting point
        slow = head;
        Node prev = null; //Last Node
        while(slow != fast){
            prev = fast;
            slow = slow.next;
            fast = fast.next;
        }
        //Remove CYCLE -> last.next = null;
        prev.next = null;

    }
    public static class linkedlist{
        public static Node head = null;
        public static Node tail = null;
        public int size = 0;

        void addlast(int value){
            Node temp = new Node(value);
            if(head == null){
                head = temp;
            }else{
                tail.next = temp;
            }
            tail = temp;
            size++;
        }
        void addfirst(int value){
            if(head == null){ addlast(value); return;}
            Node temp = new Node(value);
            temp.next = head;
            head = temp;
            size++;
        }
        void addmiddle(int value , int idx){
            if(idx == 0 ){addfirst(value);return;}
            if(idx > size){addlast(value); return;}
            Node newNode = new Node(value);
            Node temp = head;
            for(int i = 1 ; i < idx ; i++){
               temp =  temp.next;
            }
            newNode.next = temp.next;
            temp.next = newNode;
            size++;
        }
           int removeFirst(){
            int value = head.data;
            head = head.next;
            size--;
            return value;
           }

           int removelast(){
            Node temp = head;
            for(int i = 0 ; i < size-2 ; i++){
                temp = temp.next;
            }
                int value = temp.next.data;
                temp.next = null;
                tail = temp;
                return value;
           }
           int search(int value){
               Node temp = head;
               for (int i = 0; i < size; i++) {
                   if (temp.data == value) {
                       return i;
                   }
                   temp = temp.next;}
               return -1;
        }

        int helper(Node head,int value){
            if(head == null){
                return -1;
            } else if (head.data == value) {
                return 0;
            }
            int idx = helper(head.next , value);
            if(idx == -1){
                return -1;
            }
            return idx+1;
        }

        int recSearch(int value){
            return helper(head,value);
        }

        void display(){
            Node temp = head;
            while(temp != null){
                System.out.print(temp.data +" ");
                temp = temp.next;}
        }
       public void reverse(){
            Node prev  = null;
            Node curr = tail = head;

            while(curr !=  null){
                Node next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }
            head = prev;
       }
       public void remove(int Number){
            if(Number == 0){
                head = head.next;
                return;
            }
            int i = 1;
            int itoFind  = size-Number;
            Node prev = head;
            while(i < itoFind){
                prev = prev.next;
                i++;
            }
            prev.next = prev.next.next;
       }
       public Node mid(){ //Helper Function
            Node slow = head;
            Node fast = head;
            while(fast != null && fast.next != null){
                slow =  slow.next;
                fast =  fast.next.next;
            }
            return slow;
       }
        public boolean Checkpalindrome(){
           if(head == null || head.next == null){
               return true;
           }

            //Step 1 - Find Mid
            Node midNode = mid();
            //Step 2 - reverse the second half
            Node prev = null;
            Node curr = midNode;
            Node next;
            while(curr != null){
                next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }

            Node right = prev; //Pointer for Right HALF
            Node left = head;

            //Step 3 - Check left half and right half
            while(right != null){
                if(right.data != left.data){
                    return false;
                }
                right = right.next;
                left = left.next;
            }
            return true;
        }

    }
    public static void main(String[] args) {
  //  linkedlist ll = new linkedlist();
        Node N1 = new Node(1);
        Node N2 = new Node(2);
        Node N3 = new Node(3);
        Node N4 = new Node(4);
        Node N5 = new Node(5);
        Node N6 = new Node(6);
        Node N7 = new Node(7);
        N1.next = N2;
        N2.next = N3;
        N3.next = N4;
        N4.next = N5;
        N5.next = N6;
        N6.next = N7;
        N7.next = N3;
        System.out.println(Cycledetect(N1));
        RemoveCycle(N1);
        System.out.println(Cycledetect(N1));
    }



}
