public class Main {

 public static void printsudoku(int sudoku[][]) {
  System.out.println("Sudoku Solution");
  for (int i = 0; i < 9; i++) {
   for (int j = 0; j < 9; j++) {
    System.out.print(sudoku[i][j] + " ");
    if ((j + 1) % 3 == 0) {
     System.out.print("| ");
    }
   }
   System.out.println();
   if ((i + 1) % 3 == 0) {
    System.out.println("-------------------------");
   }
  }
 }

 public static boolean isSafe(int sudoku[][], int row, int col, int digit) {
  // Column Check
  for (int i = 0; i < 9; i++) {
   if (sudoku[i][col] == digit) {
    return false;
   }
  }

  // Row Check
  for (int j = 0; j < 9; j++) {
   if (sudoku[row][j] == digit) {
    return false;
   }
  }

  // Grid Check
  int sr = (row / 3) * 3;
  int sc = (col / 3) * 3;
  // 3X3 Grid
  for (int i = sr; i < sr + 3; i++) {
   for (int j = sc; j < sc + 3; j++) {
    if (sudoku[i][j] == digit) {
     return false;
    }
   }
  }
  return true;
 }

 public static boolean sudokusolver(int sudoku[][], int row, int col) {
  // Base Case: If the entire grid is processed, the Sudoku is solved.
  if (row == 9) {
   return true;
  }

  // Move to the next cell
  int nextRow = row, nextCol = col + 1;
  if (nextCol == 9) {
   nextRow++;
   nextCol = 0;
  }

  if (sudoku[row][col] != 0) {
   return sudokusolver(sudoku, nextRow, nextCol);
  }

  for (int digit = 1; digit <= 9; digit++) {
   if (isSafe(sudoku, row, col, digit)) {
    sudoku[row][col] = digit;
    if (sudokusolver(sudoku, nextRow, nextCol)) {
     return true;
    }
    sudoku[row][col] = 0; // Backtrack if the current digit doesn't lead to a solution.
   }
  }

  return false;
 }

 public static void main(String args[]) {
  int sudoku[][] = {
          {0, 0, 8, 0, 0, 0, 0, 0, 0},
          {4, 9, 0, 1, 5, 7, 0, 0, 2},
          {0, 0, 3, 0, 0, 4, 1, 9, 0},
          {1, 8, 5, 0, 6, 0, 0, 2, 0},
          {0, 0, 0, 0, 2, 0, 0, 6, 0},
          {9, 6, 0, 4, 0, 5, 3, 0, 0},
          {0, 3, 0, 0, 7, 2, 0, 0, 4},
          {0, 4, 9, 0, 3, 0, 0, 5, 7},
          {8, 2, 7, 0, 0, 9, 0, 1, 3}
  };

  if (sudokusolver(sudoku, 0, 0)) {
   System.out.println("Solution Exists!");
   printsudoku(sudoku);
  } else {
   System.out.println("Solution Does Not Exist");
  }
 }
}
